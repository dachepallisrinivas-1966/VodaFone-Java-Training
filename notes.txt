D.Srinivas
I am a Corporate Trainer
Having 32+ years of expercience
10 years of corporate training experience
My major clients - CapGemini, Cognizant, HP, Infosys, Samsung, MPhasis, CMS etc.,
Java Training (Full Stack Trainings)
I am from visakhapatnam, Andhra Pradesh.
_________________________________________________________________________________________________________________________________________


							Day-1
						------------------------



 Java Introduction
 JDK, JRE, JVM, JIT, Byte Code
 Why Java Platform Independent (WORA)
 OOP with Java
 Class, Objects and Methods
 Constructor
 Method Overloading
 Constructor Overloading
 Static  & Final Keywords
 Inheritance
 Method Overriding
 Use of super keyword
 Compare Overloading and Overriding
 Wrapper Class
 Arrays in Java
 Garbage Collector
 Finalize Method
 Program Example using Eclipse



Lab Setup:
---------------
1. Java 8 is required
2. Eclipse IDE Enterprise Edition 

								Core Java
							----------------------------
What is Java?
	It is strictly, but partially an object oriented programming language.


primitive datatypes:
	int, float, char, double, byte, short, long		-	 not objects


who developed Java?
	James Gosling from Sun microsystems in 1992.
	Oracle corporation purchased Sun microsystems.
	(www.oracle.com)

Java editions:
	1) Java SE	(Standard Edition)			-	Console/Desktop/StandAlone Apps
	2) Java EE	(Enterprise Edition)			-	Web Applications / Distributed Applications
	3) Java ME	(Micro Edition)				-	Mobile Apps	-	Not offered by oracle corp. any more.


JDK (Java Development Kit)	- 	used by developers
	

	LTS (Long Term Support)
		Java 8
		Java 11
		Java 17
		Java 21

JRE (Java Runtime Environment)
	It is installed automatically along with JDK.


JVM (Java Virtual Machine)
	It is a memory in JRE, created everytime we run a java program.
	once the program is terminated, JVM also destroyed.


What is JDK vs JRE vs JVM?

	JDK = JRE + development tools like javac, java etc.,
	JRE = JVM + libraries


WORA ?
	Write Once Run Anywhere
	This is possible because Java is a platform independent language.	
	

JIT (Just Intime) compiler:
	it is used to compile repetetive code in their nature.
	It is also part of JRE.



Structure of a Java Program:
------------------------------
	[Documentation Section]
	[Package Statement]
	[Import Statements]
	[Interface Statements]
	
	class ClassName {
		public static void main(String[] args) {
			// your code goes here ....
		}
	}
	

write a java program to print "Hello World".

steps:
-------
1. goto cmd prompt.
2.  
	> notepad Hello.java

3. type the following program

	class Hello {
		public static void main(String[] args) {
			System.out.println("Welcome to the Training Program for Vodafone");
		}
	}

4. save the program.

5. compile the program.

	> javac Hello.java

6. verify what are files created.	(not mandatory step)

	> dir Hello.*

03-10-2023  11:48               448 Hello.class
03-10-2023  11:48               134 Hello.java

7. execute the program

	> java Hello
	
8. observe the output.
	
	Welcome to the Training Program for Vodafone

	



Java Tokens:
------------------
	Token means an atomic item in a program.

	a) Identifiers	:	name given to variables, class, data members, methods, interface etc.,
	b) keywords	:	around 50 keywords	(eg: if, for, switch, while, int, float etc.,)
	c) operators	:	
		1) arithmetic
		2) relational 
		3) logical
		4) conditional
		5) increment/decrement
		6) arithmetic assignment (shorthand)
		
	d) comments	:	ignored by the compiler.
				a) //		end-of-line comment	 	(single line comment)	
				b) /* and */	block comment			(multi-line comment)				
				c) /**	and	*/				documentation comment

	e) literals		: any hard-coded values		(eg: 2, -3, 5.6)


Naming Conventions:
--------------------

	1) Idenitifiers given to variables, objects, methods:	(camel notation)
		a) it should start and continue in lowercase.
		b) if it has more than one word, it follow initcap (first letter is in capital and rest in small).
	
		eg:	length
			lengthOfBox
			boxLength
			lengthInMeters

			showData()
			toString()
			mapReducer()

	2) Identifiers given to user-defined datatypes like 		(pascal notation)
		class, interface, enum etc.,

		a) follow initcaps all through.

			String
			InputStream
			ArrayIndexOutOfBoundsException
			IOException

			
	3) Identifiers given to constants

		a) constant is a name given to literal.

		b) all are in upper case.
		    if more than one word, use underscores between them.

		    eg: PI, MIN_VALUE, MAX_VALUE

	4) Identifiers given to packages.

		a) all are in lowercase
		b) they are often abbreviated


		eg:	io,  util, awt, lang

Operators:
	
	arithmetic operators		+, -, *, /, %
	relational operators		>,<,>=,<=,==,!=
	logical operators		&&	||	!
	increment/decrement	++	--
	assignment operators	=	+=	-=	*=	/=	%=
	conditional operator		(condition)?st-1:st-2
	miscellaneous operators	.	(member access operators)
				()
				[ ]	{ }	<>	
				"instance of"


Literals that are supported by Java:
------------------------------------------------------
	Integer 	decimal		7	
			binary		0b100
			octal		07	
			hexadecimal	0x7
	
	Floating-Point	3.14	-2.6	3.0

	Boolean		true, false

	Void		null

	Character	'A', '@', '7'

	string		"impulse", "49-53-20/25", "9247175823", "A"



Language Fundamentals:
------------------------------------
datatypes:
-------------
1) primitive datatypes 	(pre-defined / intrinsic / fundamental)
	numeric
		byte		1		-128 to 127
		short		2		-32768 to 32767
		int		4		-2^31 to 2^31-1
		long		8		-2^63 to 2^63-1

		float		4		single precision		(scientific / mathematical applications)
		double		8		double precision		(commercial applications)

	non-numeric
		char		2
		void		--
		boolean		indefinite or system independent
				


2) user-defined datatypes
	class		interface	
	abstract class	



								Eclipse IDE
							-----------------------------
1. create a new folder in any of your driver (not in C drive) "vodafone".
2. click on Eclipse IDE icon 
	workspace : d:\vodafone\CoreJavaWorkspace
	click "Next"
3. click "Create a Project" link on the left side menu of IDE.
   choose "java project" option

	Project : ToStartWith
	Choose your java environment : Java-11
	uncheck "Module-Info"
	click "Next"

	you can observe "src", "bin" folder related information.

	click "Finish"
4) click "ToStartWith" in "package explorer" window
	we will see "src" folder.
	right click "src" folder -> New -> class
		class name : Hello
		check "public static void main(String[] args)
	click "Finish"
5) type the program.

	public class Hello {
		public static void main(String[] args) {
			System.out.println("welcome to vodafone training");		// only line you have to type

		}
	}
6) right click inside the program -> Run as -> Java Application

	on the console window, we can see the output.
		welcome to vodafone training

	

______________________________________________________________________________________________________
Note:
	"bin" folder is the location where eclipse store all ".class" files.
_______________________________________________________________________________________________________

_________________________________________________________________________________________________________
Note:
	if no package is created, all our java programs are stored under an virtual pacage whose name is
	"default package".
__________________________________________________________________________________________________________


What is a package?
	a package is collection of related java classes, interfaces, sub packages.
	the package structure will resolve the name conflicts.
	it is represented as a folder in o/s.

How do you name packages?
	
	com.vodafone.ui	:	to store all you main programs.
	
	
src -> new -> package
	package name : com.vodafone.ui
	click "Finish"


----------------------------------------------------------------------------------------

How do you accept data into variables during program execution?

	Scanner:
	--------
		It is a pre-defined in java, using which we can accept data.
		It is available in java.util package.

		in order to use this class, we must import it.

		import java.util.Scanner;


		methods:
		--------
			i) 	nextInt()	
			ii)	nextDouble()
			iii)	next()
			iv) 	nextLine()

		1. we must create object for the Scanner class.

			Scanner scan = new Scanner(System.in);

			System.in refer to standard input device i.e., keyboard

		2. use relevant methods to accept data.

			int number = scan.nextInt();
			double weight = scan.nextDouble();
			String name = scan.nextLine();

	_________________________________________________________________________________________________
	Note:
		Scanner is also known as resource.
		whenever memory is allocated for a resource, we must de-allocate it by closing resource.

		scan.close();
	_________________________________________________________________________________________________


write a java program to find the simple interest when principle, time and rate are given by the user.

	

									OOPS
					   		(Object Oriented Programming System)
					---------------------------------------------------------------------

It is a programming paradigm.
	a) monolithic
	b) procedure oriented
	c) structured
	d) object oriented

advantages of OOP:
	1) code reusability
	2) security

class:
	it is a user-defined datatype which represent an entity in terms of properties and behaviours.
	it is a reusable software component.
	properties are also known as data members.
	behaviours are represented as methods (functions).
	no memory is allocated when we define the class.

	classes are also called as POJO (Plain Old Java Object), Model, Bean etc.,
	As of now, we use classes to represent data and hence they are often treated as Models.

	syntax:
		class ClassName {

			// properties go here
		}
	

object:
	it is a variable whose datatype is a class.
	memory is allocated only when we create an object.


	syntax:
		ClassName  objectName;

		objectName = new ClassName();

	______________________________________________________________________________________________________________

	Note:
		the "new" keyword allocate memory for the object.
		whenever a "new" keyword is used, it represent dynamic memory.
	______________________________________________________________________________________________________________


	
features of OOP:
-----------------
	data hiding:
		prevent the direct access of data members from outside the class.
		we can achieve data hiding by making all data members are private.

	encapsulation:
		using this feature, we can access the private data members of a class
		by means of public setter and getter methods.



				
	inheritance
	abstraction
	polymorphism


access specifiers (access modifiers) (security constraints):
-------------------------------------------------------------
	i) 	default : here "default" is not a keyword.
	     (friendly)	  if no access is specified, it takes default access.
			  members under this access, can be used in the current class as well as any other class
			  inside the same package.

	i) 	private	: members under this access, can be used only in the class in which they are declared.
	ii) 	public	: members under this access, can be used in any class in that project.	
	iii) protected	: members under this access, can be used either in the current class or from any of 
			  the sub class.


method overloading:
--------------------
	it refers to multiple methods (functions) having the same name but with different parameter list.
	it is known as "method overloading".

	class Geometry {

		/* method overloading */
		public int area(int length, int breadth) {
			return length * breadth;
		}
		/* method overloading */
		public int area(int radius) {
			return 3.14 * radius * radius;
		}

	}


constructors:
--------------
	it is a special method that is executed automatically whenever an object is created.
	it should have same name as that of class.
	it can have parameters.
	it cannot return any value and should not have return type such "void".
	a class can have many constructors.this feature is known as "Constructor overloading".	

	it is used to initialize data members of a class.

"this" reference:
-----------------
	represent current object.

static members:
------------------
	"static" means "sharable".

	1) static data members:
		these are special data members which have only one memory location, data in which is shared 
		across all objects of the class.


	2) static methods:
		these are special methods and they can be called directly with the class name.
		we need not have any object to utitlize these methods.
	
		static methods are used mainly to manage static data members.
	
		syntax:
		-------
				ClassName.statMethodName(arg-1, arg-2, ....);	
	


======================
Day-2	(4-Oct-2023)
======================

							Inheritance
						------------------------------
It is the process of creating a new class (sub class) from an existing class (super).
sub class can access all the public features of super class as well as any extra features that are added to it.
it is mainly for "code reusability".
it also represent an "is-A" relationship.
"extends" keyword must be used to create sub class.
syntax:
-------
	class  SubClass  extends SuperClass {

	}

types of inheritance:
-------------------------
1) simple (single) inheritance		(A -> B)
2) hierarchical 			(A -> B, A -> C)
3) multi-level				(A -> B -> C)

____________________________________________________________________
Note:
	multiple inheritance is not supported on classes in java.
	to achieve this, we have to use interfaces.
____________________________________________________________________


"super" keyword:
-------------------
1. we can access super class public varibales
2. we can call super class constructors in sub class constructor.
	a) super()			: to call super class default constructor
	b) super(arg-1, arg-2, ...)	: to call super class parameter constructors

	_________________________________________________________________________________________
	Note:
		if we want to call the super class constructor in a sub class constructor,
		it must be written as first statement in the constructor code block.
	_________________________________________________________________________________________

3. we can call super class methods in sub class method.
	c) super.method(arg-1, arg-2, ...);



method overriding:
-------------------
when a sub class contain a method that has same signature as that of another method in it's super class,
then the sub class method is said to be "overriding".
we can use "@Override" annotation for compile-time check. It is not mandatory, but recommended.

simple (single) inheritance:
-----------------------------


							Person (name, age)
								|
								↓ extends
							Employee (salary)

hierarchical inheritance:
--------------------------

							Person (name, age)
								|
								↓ extends
						-----------------------------------------	
						↓					↓
					Employee (salary)			Student (fee)


multi-level inheritance:
---------------------------

							Person (name, age)
								↓					
							Employee (salary)			
								↓
							Manager (bonus)


_____________________________________________________________________________________________________________
Task:
			class Manager extends Employee {

					// code

			}

			modify the InheritanceApp.java
			add the manager object and print it.
_____________________________________________________________________________________________________________


final keyword:
--------------
	it can be used in 3 ways.

	a) final variable:
		it is used to declare constants.
		constant is a name given to literal.

		eg:
			final int PASS_MARKS = 35;

		____________________________________________________________________________________
		Note:
			Generally constants are declared with public static final keywords.
		eg:
			public static final int PASS_MARKS = 35;
		_____________________________________________________________________________________


		
	b) final method:
		if a method is final, it cannot be overridden in sub classes.
		
	c) final class:
		if a class is final, it cannot be inherited any more.


Wrapper class:
--------------
	every primitive data type has a corresponding pre-defined class.

	primitive 	wrapper class
	-----------	-------------
	int		Integer 
	double		Double
	long		Long
	boolean		Boolean
	short		Short
	byte		Byte


Arrays:
--------
	In java, an array is also an object.
	While creating an array itself, we must mention the size.
	Once it is declared, we can't change the size.
	index based operations are possible.

	Every array contain a property "length", that return no. of cells in the array.
	
	syntax:
		int[] arr = new int[5];

	_________________________________________________________________
	Note:
		to store large amount of data
	_________________________________________________________________

	
Enhanced for:	(JDK 1.5)
-------------
	using this loop, we can iterate over arrays and collections.

	syntax:
	-------
		for(datatype  var : array) {
			// code
		}
	
	__________________________________________________________________________________________________________
	Note:
		Enhanced for loop always process from the first element till the last element in forward-only
		direction.
	__________________________________________________________________________________________________________


Garbage collector:
-----------------
	It is a program in JRE, will peridocially check memory, and remove any unused (unreferenced) objects 		
	and reclaim the memory.

finalize() method:
-------------------
	it is available in java.lang.Object class.
	we can override this method in any of the program, and you can request the garbage collector to
	cleanup the memory.

				System.gc();



    • Abstract Class 
    • Interface (Normal, Functional, Marker) 
    • Lambda Expressions 		
    • Interface default and static Methods 	(JDK 8+)
    • Package 
    • Access Specifier 
    • Exception Handling Introduction 
    • Exceptions Vs Errors 
    • Checked Exceptions vs Unchecked Exceptions 
    • Create and Use Custom Exception 
    • Introduction to Generic 
    • Collections Framework Introduction 
    • List Interfaces and ArrayList, LinkedList, Vector 
    • Set Interface and HashSet, LinkedHashSet, TreeSet 
    • Map Interface and Hashmap, TreeMap 
    • Queue Interface 
    • Comparators/Comparable interfaces 



Abstract class:
---------------
	"absract" means "incomplete".

	"abstraction" means show the behaviour but hide the implementation details.

	if a class is defined with an "abstract" keyword is known as "abstract class".
	for an abstract class we cannot create object for it.

	____________________________________________________________________________
	Note:
		if we try to create object for an abstract class, compiler will show 
		the following message ....

			"Cannot instantiate" the type ClassName
	____________________________________________________________________________


abstract methods:
------------------
	it is a method declaration without any definition.
	when a class contain atleast one abstract method, then the class should be defined as "abstract class".
	
	______________________________________________________________________________________
	Note:
		An abstract method can exist only in an abstract class.
		But vice versa may not be true.
	_______________________________________________________________________________________



	__________________________________________________________________________________________________
	Note:
		in order to make use of any abstract class, we have to create a sub class and override
		all abstract methods of the super class, then create object for the sub class and use it. 
	___________________________________________________________________________________________________



polymorphism:
-------------
	exhibiting different behaviours for a same method call.

	_______________________________________________________________________________
	Note:
		create a super class reference variable.
		store sub class objects in it.
		call the polymorphic method using the super class reference variable.
	_______________________________________________________________________________
	

								

								Interface
							-----------------------------
An interface is also a user-defined datatype.
it contain only public abstract methods and public static final variables.	(upto JDK 7).
it cannot have properties.


we can't create object for an interface.
to make use of this, we have to create a sub class (implementation class) using "implements" keyword.
override all abstract methods of the interface in it.
then create object for the sub class.


	______________________________________________________________________________________
	What is difference between abstract class and interface?

		1. abstract class can have properties, fully defined methods, constructors,
		   abstract methods.
		
		   an interface can contain only abstract methods and final variables.

		2. using interfaces, we can achieve multiple inheritance. 
	______________________________________________________________________________________


Functional Interface:
	it is an interface that contain only one abstract method.
	it can be marked with @FunctionalInterface annotation.

	it is mainly for lambda expressions.


Default method & Static method:
	from jdk 8 onwards, we can write method definitions inside an interface.
	but the method must be default or static.

	these are mainly given for backward compatibility.

Lambda:
	it is a short way of working with functional interfaces.



								Exception Handling
							----------------------------------------

	An exception is an unexpected event due to which the program is terminated.

errors are classified into
	syntax errors	(detected by the compiler)
	logical errros	(detected by unit testing)  
	resource errors	(system errors)
	exceptions	(run time errors)

whenever an exception occurred, the program is aborted. 
to handle exceptions, java provide try and catch.

try {
	code that is expected to raise an exception
} catch(ExceptionType-1  exceptionObject) {
	exception handler task
} catch(ExceptionType-2  exceptionObject) {
	exception handler task
} ....
finally {
	task that should be executed for sure
}

the program will never terminate without executing finally block.



					Exception API	(java.lang)
				-----------------------------------
					
					Throwable (i)
				       	     ↓
		-------------------------------------------------
		↓						↓
	     Error (c)					   Exception (c)
								↓
						---------------------------------
						↓				↓                                                                                   
					RunTimeException		<<checked Exceptions>>
						↓
					<<unchecked exceptions>>

ArrayIndexOutOfBoundsException
StringIndexOutOfBoundsException
InputMismatchException
NullPointerException
etc.,

java.lang.Exception class
----------------------------------
	Exception()
	Exception(String msg)

	String getMessage()
	void printStackTrace()
	

All exception related classes are derived from Exception class or RunTimeException class.


Checked and Unchecked Exceptions:
------------------------------------------------
checked exceptions are informed by the compiler. they cannot be avoided. we must handle these exceptions using try and catch.

unchecked exceptions are not informed by the compiler. we should not use try and catch to handle these exceptions.
They should be  avoided by means of "Defensive Programming". 

Compiler identify checked exceptions. It will not allow you to continue if we don't handle it.
In case of unchecked exceptions, the compiler will not force programmer to handle it.

How does the compiler know whether it is checked or unchecked?
--------------------------------------------------------------------------------------
Any class derived from "RunTimeException" class are "unchecked exceptions", Otherwise they are  "checked exceptions".


JDK 7 Enhancements:
---------------------------------
a) multi-catch exception

try {
	code
} catch (Exception-1	   |   Exception-2  |  Exception-3    obj) {
	statements
}

b) try-with-resources



Custom Exception (user-defined exception):	
------------------------------------------
1) Create your own exception class which must be inherited from java.lang.Exception class.
2) Write a constructor that takes a String parameter and pass this String to the super class constructor.


how do we raise a user-defined exception?
-------------------------------------------------------
we use "throw" keyword to raise a user-defined exception.

syntax:
	throw new ExceptionClass(arg-1);




						Collections Framework
						  (Collections API)
						     (java.util)
					---------------------------------------
API stands for "Application Program Interface".
Any API is a collection of interfaces and abstract classes.
we need to have an implementation for any API in order to work with.

for collections api, java itself provide implementations also. 
so, we need not depend on any third party libraries.
that is why collections is known as framework.

https://docs.oracle.com/javase/tutorial/collections/index.html


1) interfaces
2) implementations
3) algorithms
4) aggregate operations


Collections are used to store and manage "group of objects".

_____________________________________________________________
Note:
	we cannot use primitive datatypes with collections.
_____________________________________________________________

Collection interface methods:
-----------------------------
	boolean add(E)
	boolean addAll(C)
	void clear()
	boolean contains(O)
	boolean contains(C)
	boolean isEmpty()
	boolean remove(O)
	boolean removeAll(C)
	int size()
	Object[] toArray()

there are 2 types.
-------------------
1) raw collection			(heterogenous)				- not recommended
2) generic collection			(homogeneous and typesafe)		- recommended		

what is generic?
	it allow type-safety.
	it is represented within angle brackets  <Type>.
	we use generics in conjunction with collections.

List interface:
---------------
	1. it allow duplicate objects.
	2. it support index-based operations.
	3. it allow null also.


	implementation classes:
	-----------------------
	ArrayList			
	LinkedList
	
	ArrayList:
	-----------
		it is used when we want to perform traversal operations frequently.
		it is not good to perform insert/delete/modify operations.

		methods:
		--------
		get(index)
		set(index, new_value)
		add(index, element)
		indexOf(element)
		remove(index)


		iterator()

	LinkedList:
	------------
		it is good to perform insert/delete/modify operations.

	

	iterator() : return an Iterator object, using which we can iterate over a collection.
		     this method available for List interface.
	
	Iterator is an interface (java.util).
		a) hasNext()
		b) next()



Set interface:
-----------------
	it doesnot allow duplicates.
	it will not support index based operations.
	it allow null values.

	__________________________________________________________________________
	Note:
		In a TreeSet, we cannot insert null values.
		If you do so, it will throw NullPointerException.
	__________________________________________________________________________


	implementation classes:
	-----------------------
	HashSet		:	order of retreival is not guaranteed.
	LinkedHashSet	:	insertion order	
	TreeSet		:	sorted order


___________________________________________________________________________
Task:
	Vector Program
	Queue Program
___________________________________________________________________________


Map interface:
---------------
	it is used to store key-value pair kind of data.
	key cannot be duplicated.
	key cannot be null.
	value be can be duplicated.
	value can be null.


	implementation classes:
	-----------------------
	HashMap		:	order of retrieval is not guaranteed.	
	LinkedHashMap	:	insertion order
	TreeMap		:	sorted order on key

	methods:
	--------
		put(key,value)
		value get(key)
		boolean containsKey(key)
		Set<K> keySet()
		values()


Collections class	(java.util):
--------------------------------------
	sort(list)
	reverse(list)
	binarySearch(key, list)


Comparable interface:
------------------------
	int compareTo(Object o)

		return 0 of two objects are equal.
		return +ve integer if first object is big.
		return -ve integer if first object is small.



	






























	Contract between equals() and hashcode():
	--------------------------------------------
	if two objects are equal as a result of equals(), then they should have the same hash code.
	but vice versa is not required.












	





















nisha jagtap
pravin shende
ajay shedge
ketan kulkarni
satyam prasad
tanvi borade


		